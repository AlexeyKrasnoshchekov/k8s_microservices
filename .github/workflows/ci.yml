name: CI for project

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  call-workflow:
    uses: .github/workflows/reusable.yml@main
    with:
      REGITRY_USER: alexkkk21
      SERVICE_NAME: adservice
    secrets:
      DC_TOKEN: ${{ secrets.DC_TOKEN }}

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         npm i

  #     - name: Run tests
  #       run: npm run lint

  # build_adservice:
  #   # needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName1 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName1 }}/"
  #         file: "${{ env.serviceName1 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName1 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_cartservice:
  #   needs: build_adservice
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName2 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName2 }}/src"
  #         file: "${{ env.serviceName2 }}/src/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName2 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_checkoutservice:
  #   needs: build_cartservice
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName3 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName3 }}/"
  #         file: "${{ env.serviceName3 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName3 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_currencyservice:
  #   needs: build_checkoutservice
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName4 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName4 }}/"
  #         file: "${{ env.serviceName4 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName4 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_emailservice:
  #   needs: build_currencyservice
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName5 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName5 }}/"
  #         file: "${{ env.serviceName5 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName5 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_frontend:
  #   needs: build_emailservice
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName6 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName6 }}/"
  #         file: "${{ env.serviceName6 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName6 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_loadgenerator:
  #   needs: build_frontend
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName7 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName7 }}/"
  #         file: "${{ env.serviceName7 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName7 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_paymentservice:
  #   needs: build_loadgenerator
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName8 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName8 }}/"
  #         file: "${{ env.serviceName8 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName8 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_productcatalogservice:
  #   needs: build_paymentservice
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName9 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName9 }}/"
  #         file: "${{ env.serviceName9 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName9 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_recommendationservice:
  #   needs: build_productcatalogservice
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName10 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName10 }}/"
  #         file: "${{ env.serviceName10 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName10 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_shippingservice:
  #   needs: build_recommendationservice
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName11 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName11 }}/"
  #         file: "${{ env.serviceName11 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName11 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # build_shoppingassistantservice:
  #   needs: build_shippingservice
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ env.REGITRY_USER }}
  #         password: ${{ secrets.DC_TOKEN  }}

  #       # Extract metadata (tags, labels) for Docker
  #     - name: Docker Metadata action
  #       uses: docker/metadata-action@v5.0.0
  #       with:
  #         images: "${{ env.REGITRY_USER }}/${{ env.serviceName12 }}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: "${{ env.serviceName12 }}/"
  #         file: "${{ env.serviceName12 }}/Dockerfile"
  #         # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  #         push: true
  #         tags: "${{ env.REGITRY_USER }}/${{ env.serviceName12 }}"
  #         labels: ${{ steps.meta.outputs.labels }}

  # deploy:
  #   needs: build_image1
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Deploy to server via SSH
  #       uses: appleboy/ssh-action@v0.1.9
  #       with:
  #         host: ${{ secrets.SERVER_IP }}
  #         username: ${{ secrets.SERVER_USER }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         script: |
  #           echo "Проверка версии Docker:"
  #           docker --version
  #           echo "Путь до docker:"
  #           which docker
  #           if command -v docker > /dev/null 2>&1; then
  #             docker pull alexkkk21/nextjsapp5
  #             docker stop my_app || true
  #             docker rm my_app || true
  #             docker run -d -p 9999:8889 --name my_app alexkkk21/nextjsapp5
  #           else
  #             echo "Docker не найден"
  #             exit 1
  #           fi

  # - name: Проверить Docker на сервере через SSH и задеплоить образ
  #   uses: webfactory/ssh-agent@v0.7.0
  #   with:
  #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
  #     script: |
  # echo "Проверка версии Docker:"
  # docker --version
  # echo "Путь до docker:"
  # which docker
  # if command -v docker > /dev/null 2>&1; then
  #   docker pull alexkkk21/nextjsapp4
  #   docker stop my_app || true
  #   docker rm my_app || true
  #   docker run -d -p 9999:80 --name my_app alexkkk21/nextjsapp4
  # else
  #   echo "Docker не найден"
  #   exit 1
  # fi

  # - name: Run remote commands
  #   run: ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'docker ps'

  ###
  # - name: Deploy container to server via SSH
  #   uses: appleboy/ssh-action@v0.1.9
  #   with:
  #     host: ${{ secrets.SERVER_IP }}
  #     username: ${{ secrets.SERVER_USER }}
  #     key: ${{ secrets.SSH_PRIVATE_PASS }}
  #     script: |

  # build_image2:
  #   needs: build_image1
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # - name: Set up QEMU
  #     #   uses: docker/setup-qemu-action@v3

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ env.REGITRY_USER }}/${{ env.IMAGE_NAME }}:latest
  #         labels: ${{ steps.meta.outputs.labels }}
